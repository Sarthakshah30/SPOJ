#include<iostream>
#include<cstring>
#include<utility>
#include<queue>
#include<algorithm>

using namespace std;

	int array[260][260];
			int n,m;
	bool visited[260][260];
	void 		bfsUtil(int n,int m);
	int bfs(int x,int y);

int main()
{
	while(true)
	{

		cin>>n>>m;
		if(n== 0 && m==0)
		break;
		bfsUtil(n,m);
		
	}
}

void bfsUtil(int n,int m)
{

	for(int i = 0 ; i < n ; i++)
	for(int j = 0 ; j < m ;j++)
	cin>>array[i][j];
	
	vector<int> freq;
	
	memset(visited,0,sizeof(visited));
	
	int component=0;
	for(int i = 0 ; i < n ; i++)
	{
		for(int j = 0 ; j < m ; j++)
		{
			if(!visited[i][j] && array[i][j])
			{
				component++;
				int result = bfs(i,j);
				freq.push_back(result);
			}
		}
	}
	cout<<component<<endl;
	std::sort(freq.begin(),freq.end());
	
	for(int i = 0 ; i < freq.size() ; i++)
	{
		int x = freq[i];
		int count=1; 
		int j=i+1;
		while(freq[j]==x)
		{
			j++;
			count++;
		}
		cout<<x<<" "<<count<<endl;
		i=j-1;
	}
	
}

int bfs(int x,int y)
{
	queue< pair<int,int> > q;
	int count=0;
	count++;
	q.push(make_pair(x,y));
	visited[x][y]=true;
	
	while(!q.empty())
	{
		int i = q.front().first;
		int j = q.front().second;
		
		q.pop();
		
		if(i-1 >=0 && array[i-1][j]==1 && visited[i-1][j]==false)
		{
			count++;
			q.push(make_pair(i-1,j));
			visited[i-1][j]=true;
		}
		if(j-1 >=0 && array[i][j-1]==1 && visited[i][j-1]==false)
		{
			count++;
			q.push(make_pair(i,j-1));
			visited[i][j-1]=true;
		}
		if(i+1 <n && array[i+1][j]==1 && visited[i+1][j]==false)
		{
			count++;
			q.push(make_pair(i+1,j));
			visited[i+1][j]=true;
		}
		if(j+1<m && array[i][j+1]==1 && visited[i][j+1]==false)
		{
			count++;
			q.push(make_pair(i,j+1));
			visited[i][j+1]=true;
		}		
	}
	
	return count;
}
