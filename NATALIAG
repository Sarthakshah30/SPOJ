#include<bits/stdc++.h>

	using namespace std;
	char maze[101][101];
	int row,col;
	bool visited[101][101];
	int dobfs(const pair<int,int> &start, const pair<int,int> &end);

int main()
{
	int test;
	cin>>test;
	while(test-->0)
	{
		cin>>row>>col;
		for(int i = 0 ; i<row ; i++)
		cin>>maze[i];
		memset(visited,false,sizeof(visited));
		pair<int,int> start;
		pair<int,int> destination;
		
		for(int i = 0 ; i< row ; i++)
		{
			for(int j = 0 ; j < col ; j++)
			{
				if(maze[i][j]=='$')
				start=make_pair(i,j);
				if(maze[i][j]=='#')
				destination=make_pair(i,j);
			}
		}
		
		cout<<dobfs(start,destination)<<endl;
	}
}

int dobfs(const pair<int,int> &start, const pair<int,int> &end)
{
	queue< pair<int,int> > q;
	visited[start.first][start.second]=true;
	q.push(start);
	int distance[row][col];
	distance[start.first][start.second]=0;
	
	while(!q.empty())
	{
		int x=q.front().first;
		int y=q.front().second;
		q.pop();
		
		if(x==end.first && y==end.second)
		return distance[x][y];
		
		if(x-1>=0 && !visited[x-1][y] && maze[x-1][y]!='*')
		{
			distance[x-1][y]=distance[x][y]+1;
			visited[x-1][y]=true;
			q.push(make_pair(x-1,y));
		}
		if(x+1<row && !visited[x+1][y] && maze[x+1][y]!='*')
		{
			distance[x+1][y]=distance[x][y]+1;
			visited[x+1][y]=true;
			q.push(make_pair(x+1,y));
		}
		if(y-1>=0 && !visited[x][y-1] && maze[x][y-1]!='*')
		{
			distance[x][y-1]=distance[x][y]+1;
			visited[x][y-1]=true;
			q.push(make_pair(x,y-1));
		}
		if(y+1<col && !visited[x][y+1] && maze[x][y+1]!='*')
		{
			distance[x][y+1]=distance[x][y]+1;
			visited[x][y+1]=true;
			q.push(make_pair(x,y+1));
		}
	}
	return -1;
}
