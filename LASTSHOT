#include<iostream>
#include<stack>
#include<cstring>
#include<queue>
#include<vector>
#include<algorithm>
using namespace std;


vector<int> adj[10001];
int N,M;
int dobfs(int source);

int main(){
	cin>>N>>M;
	int x,y;
	for(int i = 1 ; i <=M ; i++){
		cin>>x>>y;
		adj[x-1].push_back(y-1);
	}
	
	y=dobfs(0);
	for(int i = 1 ; i <N ; i++){
		x=dobfs(i);
		if(x>y)
		y=x;
	}
	cout<<y<<endl;

}

int dobfs(int source){
	bool visited[N];
	int count=0;
	memset(visited,0,sizeof(visited));
	visited[source]=true;
	count++;
	queue<int> q;
	q.push(source);
	while(!q.empty()){
		int x = q.front();
		q.pop();
		for(int i = 0 ; i<adj[x].size() ; i++){
			if(!visited[adj[x][i]]){
				count++;
				visited[adj[x][i]]=true;
				q.push(adj[x][i]);
			}
		}
	}
	return count;
}
