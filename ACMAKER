#include<bits/stdc++.h>

using namespace std;
int calculate(int abb_index, int line_index,string abb,string line,bool flag);

int dp[150][95][2];

int main()
{
	while(true)
	{
		vector<string> insif;
		int insif_no;
		
		cin>>insif_no;
		
		if(insif_no==0)
		break;
		
		for(int i = 0 ; i<insif_no;i++)
		{
			string str;
			cin>>str;
			insif.push_back(str);
		}
		
		while(true)
		{
			string s1,s2;
			cin>>s1;
			getchar();
			getline(cin,s2);
			if(s1+" "+s2 == "LAST CASE")
			break;
			int i,j;
			i=j=0;
			while(i<s2.size())
			{
				if(s2[i]==' ')
				{
					i++;
					j++;
					continue;
				}
				
				while(j<s2.size() && s2[j]!=' ')
				j++;
				
				string word = s2.substr(i,j-i);
				if(std::find(insif.begin(),insif.end(),word)!=insif.end())
				{
					s2.erase(i,j-i);
					j=i;
				}
				else
				{
					i=j+1;
					j=i;
				}
			}
			
			memset(dp,-1,sizeof(dp));
			int res=calculate(0,0,s1,s2,true);
			if(res>0)
			cout<<s1<<" "<<"can be formed in "<<res<<" ways"<<endl;
			else
			cout<<s1<<" is not a valid abbreviation"<<endl;
		}
		
	}
}

int calculate(int abb_index, int line_index,string abb,string line,bool flag)
{
	
	
	//base cases
	if(line_index >=line.size())
	{
		if(abb_index<abb.size())
		return 0;
		if(abb_index >= abb.size())
		return 1;
	}
	
	if(dp[abb_index][line_index][flag]!=-1)
	return dp[abb_index][line_index][flag];
	
	
	if(line_index < line.size())
	{
		if(abb_index >=abb.size())
		{
			if(flag==false)
			{
				bool xd=false;
				while(line_index<line.size() && line[line_index]!=' ')
				line_index++;
				while(line_index<line.size() && line[line_index]==' ')
				line_index++;
				if(line_index<line.size())
				{
					dp[abb_index][line_index][flag]=0;
					return 0;
				}
				dp[abb_index][line_index][flag]=1;
				return 1;
			}
			dp[abb_index][line_index][flag]=0;
			return 0;
		}
	}
	
	if(line[line_index]==' ')
	{
	dp[abb_index][line_index][flag]=calculate(abb_index,line_index+1,abb,line,true);
	return dp[abb_index][line_index][flag];
}
	







	
	//extract word from line
	
	int i=line_index;
	while(i<line.size() && line[i]!=' ')
	i++;
	string word = line.substr(line_index,i-line_index);
	

	//if abb index is not in the word and it is new word return 0, else check for the abb index in ndext word
	
	char x = abb[abb_index]+32;
	size_t curr= word.find(x,0);
	if(curr==string::npos && flag==true)
	return 0;
	if(curr==string::npos && flag==false)
	{
		dp[abb_index][line_index][flag]=calculate(abb_index,i+1,abb,line,true);
		return dp[abb_index][line_index][flag];
}
	
	//if abb_index is present
		
	int j=line_index;
	int sum=0;
	

	if(flag==false)
	{
		sum+=calculate(abb_index,i+1,abb,line,true);
	}
	
	while(j<i)
	{
		if(line[j]==abb[abb_index]+32)
		{
			sum+=calculate(abb_index+1,j+1,abb,line,false);
		}
		j++;
	}
	dp[abb_index][line_index][flag]=sum;
	return sum;
	
}

